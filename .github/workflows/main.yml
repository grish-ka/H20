name: Build & Sign H20 Windows Installer

on:
  push:
    tags:
      - 'v*.*.*' # Triggers when a tag like v1.0.0 is pushed
  workflow_dispatch: # Allows manual trigger from GitHub UI

jobs:
  build-and-sign:
    runs-on: windows-latest
    permissions:
      contents: write # To upload release assets
      id-token: write # Required for Sigstore OIDC authentication

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x' # Specify your Python version

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install dependencies from src/requirements.txt if it exists, otherwise from root
        if (Test-Path ".\src\requirements.txt") {
            pip install -r .\src\requirements.txt
        } else {
            pip install -r .\requirements.txt
        }
        pip install pyinstaller # Install pyinstaller

    - name: Package Python Application with PyInstaller
      run: |
        # Clean up old builds
        if (Test-Path ".\dist") { Remove-Item -Recurse -Force ".\dist" }
        if (Test-Path ".\build") { Remove-Item -Recurse -Force ".\build" }
        if (Test-Path ".\H20.spec") { Remove-Item -Force ".\H20.spec" }
        if (Test-Path ".\app") { Remove-Item -Recurse -Force ".\app" }

        # Run PyInstaller to create the bundled application as a single executable
        pyinstaller --name H20 --onefile --windowed src/main.py 

        # Create the 'app' directory
        New-Item -ItemType Directory -Path ".\app"

        # Copy PyInstaller's single executable to the 'app' folder
        Copy-Item -Path ".\dist\H20.exe" -Destination ".\app\" -Force

      working-directory: . # Assumes main.py is at the root of your repo

    - name: Install Master Packager Dev via MSI
      run: |
        # --- IMPORTANT: Replace this URL with the official direct download link for the mpdev MSI ---
        $msiUrl = "https://cdn.masterpackager.com/installer/dev/1.2.0/mpdev_self_contained_x64_1.2.0.msi" # <-- **VERIFY THIS URL**
        $msiPath = "$env:TEMP\mpdev_self_contained_x64_1.2.0.msi"

        Write-Host "Downloading Master Packager Dev MSI from $msiUrl..."
        Invoke-WebRequest -Uri $msiUrl -OutFile $msiPath -ErrorAction Stop

        Write-Host "Installing mpdev.msi silently..."
        # Use Start-Process with -Wait to ensure the installation completes before continuing.
        # /i specifies the installer file.
        # /qn specifies a quiet, no-UI installation.
        Start-Process msiexec.exe -ArgumentList "/i `"$msiPath`" /qn" -Wait

        Write-Host "Installation complete. Verifying mpdev is available..."
        if (-not (Get-Command mpdev -ErrorAction SilentlyContinue)) {
            Write-Error "mpdev command not found after installation. The MSI might not have added it to the PATH."
            exit 1
        }
        Write-Host "mpdev verified successfully."
      shell: pwsh

    - name: Build Installer with mpdev
      run: mpdev build --config msi.json
      working-directory: . # Assumes msi.json is at the root of your repo

    - name: List Output Files (for debugging)
      run: |
        Get-ChildItem -Path "OutputMSI" -Recurse

    # --- Sigstore Signing Steps ---
    - name: Set up Cosign
      uses: sigstore/cosign-installer@v3.1.1
      with:
        cosign-release: 'v2.2.3'

    - name: Sign MSI with Cosign
      shell: pwsh
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        $msiPath = "OutputMSI/H20-1.0.0.msi"
        
        if (-not (Test-Path $msiPath)) {
            Write-Host "MSI file not found at $msiPath. Listing OutputMSI folder for debugging..."
            Get-ChildItem -Path "OutputMSI" -Recurse
            exit 1
        }
        
        Write-Host "Attempting to sign $msiPath with Cosign..."
        cosign sign-blob --output-signature "$($msiPath).sig" --output-attestation "$($msiPath).att" --yes "$msiPath"
        
        Write-Host "MSI signing process completed. Signature and attestation files generated."

    # --- Release Creation and Asset Upload ---
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload MSI to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: OutputMSI/H20-1.0.0.msi
        asset_name: H20-${{ github.ref_name }}.msi
        asset_content_type: application/x-msi